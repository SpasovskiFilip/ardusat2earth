package org.opencv.samples.tutorial2;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.WindowManager;

public class Sample2NativeCamera extends Activity implements CvCameraViewListener ,SensorEventListener,LocationListener{
    private static final String  TAG             = "OCVSample::Activity";

    public static final int      VIEW_MODE_MAG  = 0;
    public static final int      VIEW_MODE_SUN  = 1;
    public static final int      VIEW_MODE_HOR = 2;

    private static int           viewMode       = VIEW_MODE_MAG;
    private MenuItem             mItemPreviewMag;
    private MenuItem             GPSlog;
    private MenuItem             mItemPreviewSun;
    private MenuItem             mItemPreviewHor;
    private Mat                  mRgba;
    private Mat                  mIntermediateMat;
    private Mat                  mIntermediateMat_norm;
    private Mat                  mIntermediateMat_norm_scaled;
    private SensorManager mSensorManager;
    private Sensor mMagnetometer;
    public static double latitude;  
    public static double longitude; 
    float x=0;
    float y=0;
    float z=0;
    private CameraBridgeViewBase mOpenCvCameraView;

    private BaseLoaderCallback  mLoaderCallback = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {
            switch (status) {
                case LoaderCallbackInterface.SUCCESS:
                {
                    Log.i(TAG, "OpenCV loaded successfully");
                    mOpenCvCameraView.enableView();
                } break;
                default:
                {
                    super.onManagerConnected(status);
                } break;
            }
        }
    };

    public Sample2NativeCamera() {
        Log.i(TAG, "Instantiated new " + this.getClass());
    }

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        Log.i(TAG, "called onCreate");
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        setContentView(R.layout.tutorial2_surface_view);

        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial2_activity_surface_view);
        mOpenCvCameraView.setCvCameraViewListener(this);
        //Set the size for the picture####################################
        mOpenCvCameraView.setMaxFrameSize(500, 500);
        mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
      mMagnetometer = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
    }

    @Override
    public void onPause()
    {
        if (mOpenCvCameraView != null)
            mOpenCvCameraView.disableView();
        mSensorManager.unregisterListener(this);
        super.onPause();
    }

    @Override
    public void onResume()
    {
        super.onResume();
        latitude=0;
        longitude=0;
        OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_3, this, mLoaderCallback);
        mSensorManager.registerListener(this, mMagnetometer, SensorManager.SENSOR_DELAY_NORMAL);
    }

    public void onDestroy() {
        super.onDestroy();
        if (mOpenCvCameraView != null)
            mOpenCvCameraView.disableView();
    }

    public void onCameraViewStarted(int width, int height) {
        mRgba = new Mat(height, width, CvType.CV_8UC4);
        mIntermediateMat = new Mat(height, width, CvType.CV_32FC1);
        mIntermediateMat_norm = new Mat(height, width, CvType.CV_32FC1);
        mIntermediateMat_norm_scaled = new Mat(height, width, CvType.CV_32FC1);
    }

    public void onCameraViewStopped() {
        mRgba.release();
        mIntermediateMat.release();
        mIntermediateMat_norm.release();
        mIntermediateMat_norm_scaled.release();
    }

    public Mat onCameraFrame(Mat inputFrame) {
    	int height=mRgba.rows();
		int width=mRgba.cols();
		int view_angle_x=120;
		int view_angle_y=80;
        switch (Sample2NativeCamera.viewMode) {
            case Sample2NativeCamera.VIEW_MODE_SUN:
            {
                Imgproc.cvtColor(inputFrame, mRgba, Imgproc.COLOR_GRAY2RGBA, 4);
                Imgproc.GaussianBlur(mRgba, mRgba,new Size(31,31),13);
                   	int	q=0;
                	int	m=0;
                	int	n=0;
                	int[] p=new int[2];
                	p[0]=0; p[1]=0;
                	for (int i=0;i<height;i+=2){
                		for (int j=0;j<width;j+=2){
                			if (mRgba.get(i,j)[0]>q){
            		            q=(int)mRgba.get(i,j)[0];
            		            m=i;
            		            n=j;
            		        }
                		}
                	}        		            
                		                     
                		p[0]=-m+(int)(height/2);
                		p[1]=n-(int)(width/2);
                	
                		int pitch=(int)(((float)(p[0])/(float)height)*view_angle_y);
                		int yaw=(int)(((float)(p[1])/(float)(width))*view_angle_x);
            
                		Core.putText(mRgba, "PITCH in degrees:", new Point(10, inputFrame.rows() - 40), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                        Core.putText(mRgba, Integer.toString(pitch), new Point(10, inputFrame.rows() - 10), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                        
                        Core.putText(mRgba, "YAW in degrees:", new Point(10, inputFrame.rows() - 100), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                        Core.putText(mRgba, Integer.toString(yaw), new Point(10, inputFrame.rows() - 70), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
            
                		
        
            } break;
            case Sample2NativeCamera.VIEW_MODE_MAG:
            {
            	double str=Math.sqrt(x*x+y*y+z*z);
            	double x_angle=(Math.acos(x/str)/Math.PI)*180;
            	double y_angle=(Math.acos(y/str)/Math.PI)*180;
            	double z_angle=(Math.acos(z/str)/Math.PI)*180;
            	inputFrame.copyTo(mRgba);
               
            	Core.putText(mRgba, "Magnetic field strength in uT:", new Point(10, inputFrame.rows() - 40), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, Integer.toString((int)str), new Point(10, inputFrame.rows() - 10), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                
                Core.putText(mRgba, "z_angle in degrees:", new Point(10, inputFrame.rows() - 70), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, Integer.toString((int)z), new Point(220, inputFrame.rows() - 70), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
               
                Core.putText(mRgba, "y_angle in degrees:", new Point(10, inputFrame.rows() - 100), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, Integer.toString((int)y), new Point(220, inputFrame.rows() - 100), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
               
                Core.putText(mRgba, "x_angle in degrees:", new Point(10, inputFrame.rows() - 130), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, Integer.toString((int)x), new Point(220, inputFrame.rows() - 130), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                
               //Core.putText(mRgba, "LONGITUDE:", new Point(10, inputFrame.rows() - 280), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, "LATITUDE:", new Point(10, inputFrame.rows() - 190), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, Double.toString(latitude), new Point(10, inputFrame.rows() - 160), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                
                //Core.putText(mRgba, "LATITUDE:", new Point(10, inputFrame.rows() - 320), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, "LONGITUDE:", new Point(10, inputFrame.rows() - 250), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                Core.putText(mRgba, Double.toString(longitude), new Point(10, inputFrame.rows() - 220), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                
            } break;
            case Sample2NativeCamera.VIEW_MODE_HOR:
            {   
            	Imgproc.cvtColor(inputFrame, mRgba, Imgproc.COLOR_GRAY2RGBA, 4);
            	            	Imgproc.medianBlur(inputFrame, inputFrame, 11);
            	Imgproc.GaussianBlur(inputFrame, inputFrame,new Size(3,3),3);
            	Imgproc.Canny(inputFrame, mRgba, 200, 0,3,true);
            	int[] p1=new int[2];
            			
            			int[] p2=new int[2];
            			
            			

            			for (int i=0;i<height;i++)
            			{ if(mRgba.get(i,0)[0]==255)
            			        {
            					p1[0]=i;
            					p1[1]=0;
            			        break;
            			        }
            			}

            			for (int i=0;i<height;i++)
            			        {
            				if(mRgba.get(i,width-1)[0]==255)
            			        {
            			         	p2[0]=i;
                    				p2[1]=width-1;
            			            break;
            			            }
            			        }
            			        
            			for (int i=0;i<width;i++)
            			    if(mRgba.get(0,i)[0]==255)
            			    { if (p1[0]==0&&p1[1]==0)
            			    {  p1[0]=0;
            				p1[1]=i;
            			            break;}
            			        else{
            			            p2[0]=0;
            			            p2[1]=i;
            			            break;}}
            			if (p2[0]==0&&p2[1]==0){
            			    for (int i=0;i<width;i++)
            			        {
            			    	if(mRgba.get(height-1,i)[0]==255){
            			        
            			            p2[0]=height-1;
            			            p2[1]=i;
            			            break;}
            			}       }
            			if (p1[1]>p2[1])
            			{
            				int []tmp=new int[2];
            				tmp=p1;p1=p2;p2=tmp;
            			}
            			
            			  

            			p1[0]=-p1[0]+height/2;
            			p2[0]=-p2[0]+height/2;
            			p1[1]=p1[1]-width/2;
            			p2[1]=p2[1]-width/2;
            			
            			
            			double k=0;
            			if((p2[1]-p1[1])!=0){
            			    
            				k=new Double(p2[0]-p1[0])/new Double(p2[1]-p1[1]);
            			}
            			else{k=99999;}
            			double b=0;
            			b=-p1[1]*k+p1[0];
            			double pitch=0;
            			double roll=0;
            			pitch=-(b/new Double(height))*view_angle_y;
            			roll=-(Math.atan(k)/Math.PI)*180;
            			
            			Core.putText(mRgba, "PITCH in degrees:", new Point(10, inputFrame.rows() - 40), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                        Core.putText(mRgba, Integer.toString((int)pitch), new Point(10, inputFrame.rows() - 10), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
                        
                        Core.putText(mRgba, "ROLL in degrees:", new Point(10, inputFrame.rows() - 100), 3, 0.6, new Scalar(255, 0, 0, 255), 2);
                        Core.putText(mRgba, Integer.toString((int)roll), new Point(10, inputFrame.rows() - 70), 3, 0.7, new Scalar(255, 0, 0, 255), 2);
            	
            } break;
        }
//        return inputFrame;
        return mRgba;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        Log.i(TAG, "called onCreateOptionsMenu");
        mItemPreviewMag = menu.add("Magnetometer");
        mItemPreviewHor = menu.add("Horizon Sensor");
        mItemPreviewSun = menu.add("Sun Sensor");
        GPSlog = menu.add("GPSlog");
        
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        Log.i(TAG, "called onOptionsItemSelected; selected item: " + item);
        if (item == mItemPreviewMag)
        {
            mOpenCvCameraView.SetCaptureFormat(Highgui.CV_CAP_ANDROID_COLOR_FRAME_RGBA);
            viewMode = VIEW_MODE_MAG;
        }
        else if (item == mItemPreviewSun)
        {
            mOpenCvCameraView.SetCaptureFormat(Highgui.CV_CAP_ANDROID_GREY_FRAME);
            viewMode = VIEW_MODE_SUN;      
     
         }  
        
        else if (item == mItemPreviewHor)
        {
            mOpenCvCameraView.SetCaptureFormat(Highgui.CV_CAP_ANDROID_GREY_FRAME);
            viewMode = VIEW_MODE_HOR;
        }
        else if (item == GPSlog)
        {
            mOpenCvCameraView.SetCaptureFormat(Highgui.CV_CAP_ANDROID_COLOR_FRAME_RGBA);
            viewMode = VIEW_MODE_MAG;
            Log.d(TAG, "KLIKKKKKKKK");
            LocationManager mlocManager=null;  
            LocationListener mlocListener;  
            mlocManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);  
            mlocListener = new Sample2NativeCamera();  
           mlocManager.requestLocationUpdates( LocationManager.GPS_PROVIDER, 0, 0, mlocListener);      
           
           if (mlocManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {  
               if(latitude>0)  
               {  
            	   Log.d(TAG, "GOODDDDDD");  
                }  
                else  
                {  
                	Log.d(TAG, "GPS IN PROGRESS PLZ WAIT");  
                 }  
             } else {  
            	 Log.d(TAG, "GPS NOT TURNED ON"); 
             }  
     
         }
        
        

        return true;
    }

	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onSensorChanged(SensorEvent arg0) {
		x=arg0.values[0];
		y=arg0.values[1];
		z=arg0.values[2];
		
	}

	@Override
	public void onLocationChanged(Location loc) {
		
		Log.d(TAG, "LOC CHANGED YEe");  
		loc.getLatitude();  
        loc.getLongitude();  
        latitude=loc.getLatitude();  
        longitude=loc.getLongitude(); 
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderDisabled(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
		// TODO Auto-generated method stub
		
	}
}
